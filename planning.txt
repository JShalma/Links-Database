DATA ARCHITECTURE
-----------------
* /folder/[id]/page.tsx
    * Fetches local data (currentFolder + immediate children)

* /folder/[id]/layout.tsx
    * Global for all folder pages
    * Fetches global/complete data - folder-tree hierarchy
    * Setup FolderTreeContext
    * SideBar + Breadcrumb

* FolderTreeContext.tsx
    * tree
    * currentFolder id
    * setCurrentFolder: (id) =>
    * addFolder: async ()
    * deleteItem
    * renameItem
    * moveItem

* server-actions.tsx
    * Deals directly with database (Prisma)

BREADCRUMB
----------
* How would I get the path to the node?
    * After the getFolder finds the node, it bubbles back the answer, so maybe what I can do is add some side thing to it so that it 
    automatically creates the breadcrumb path at the same time.


MODAL
-----
* General modal = necessary
* Specific modals with forms (+ functions)
    * Rename = generally geared toward folder (one input)
        * Rename File = multiple inputs 
    
* Rename:
    * Folder/File Name
    * File URL
    * File Img
    * File Description

Rename would be a general component that's exclusively for Folder, but if the type is file, then it has a component called EditFile that it
can render. That would still be inside the form. The okay (/modify) button is inside the Rename component. It will have a function that 
onClick sends the data (either file or folder) to the server. Where does the data be stored then? The editFile data might need to be passed
back up or stay in the parent (Rename) component in order to minimize problems. The data would need to be a controlled elements with 
useState. But some useState might be optional.

Clicking the btns opens the modal, but now how do I tell the modal which specific modalContent to render? Could create a state that can be
updated based on what you click. Click delete would update state to 1, and if it's one render this item on the modal.


MOVE NAVIGATION
---------------
* Allow file or folder to be moved into a different folder
    * In PRISMA: change parentID of current file or folder
    * In Tree: delete current node, rebuild at right node folder

The tree function will loop through everything and find the right node. It deletes that node. Then it starts backtracking, as it backtracks
it will be checking each node if it is a folder and if that folder matches the new parentid for the deleted node, it can insert that node
into that folder.

function (tree, deleteItemId, nodeWithNewParentId)
    for (node in tree):
        if node === folder:

Updatefunction(callback = move)

move:
    // call updateTree with delete()
    // call updateTree with insertNode()

// updateTree w/ delete --> returns tree without node
// updateTree w/ insert --> returns tree with item insertNode

move: tree, updateParentId, currentNode
