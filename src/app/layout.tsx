import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
// import { PrismaClient } from "@prisma/client";
// import buildTree from "@/Components/dataStructure";
// import { TreeNode } from "@/Components/types";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// const prisma = new PrismaClient();


export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {

  //   const items: (Item & { fileData: FileData })[] = await prisma.item.findMany({
  //   include: { fileData: true },
  // });
  // // console.log(buildTree(items));
  // const roots = buildTree(items);
  // // let codeStuff = <></>;

  // const childFolders: TreeNode[] = roots[0].children!;
  // // console.log(roots[0].children);

  // function loopThr(something : TreeNode[]){
  //   if (something[0].type === "folder" ){
  //     recursion(something[0].children)
  //   }
  // }
  

  // function recursion(stuff: TreeNode[]){
  //   // console.log(stuff);
    
  //   for(let i = 0; i < stuff.length; i++){
  //     if (stuff[i].type === "file"){
  
  //         console.log("File");
  //         }
  //     loopThr([stuff[i]]);
  //   }
    
  // }
   
  // loopThr(roots);
  // console.log(childFolders);

  return (
    <html lang="en">
      <body>
        {children}
      </body>
    </html>
  );
}
